const {
  merge
} = require("webpack-merge");
const singleSpaDefaults = require("webpack-config-single-spa-ts");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin')
const path = require('path');
const fs = require('fs');
const {
  BundleAnalyzerPlugin
} = require("webpack-bundle-analyzer");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");

const outputPath = path.resolve(__dirname, 'dist')

module.exports = (webpackConfigEnv, argv) => {
  const orgName = "smf";
  const defaultConfig = singleSpaDefaults({
    orgName,
    projectName: "root-config",
    webpackConfigEnv,
    argv,
    disableHtmlGeneration: true,
  });

  var config = merge(defaultConfig, {
    plugins: [
      new ModuleFederationPlugin({
        shared: {
          "@angular/core": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/common": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/router": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/common/http": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@single-spa": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
        },
      }),
      new HtmlWebpackPlugin({
        inject: false,
        template: "src/index.ejs",
        templateParameters: {
          isLocal: webpackConfigEnv && webpackConfigEnv.isLocal,
          orgName,
        },
      }),
    ],
  });

  fs.writeFileSync(path.resolve(process.cwd(), 'config.json'), JSON.stringify(config, null, 2));

  let isProduction = argv.p || argv.mode === "production";

  var opts = {
    orgName,
    projectName: "root-config",
    webpackConfigEnv,
    argv,
    disableHtmlGeneration: true,
  }

  config = {
    mode: isProduction ? "production" : "development",
    entry: path.resolve(
      process.cwd(),
      `src/${opts.orgName}-${opts.projectName}.ts`
    ),

    output: {
      // filename: `${opts.orgName}-${opts.projectName}.js`,
      libraryTarget: 'umd',
      path: path.resolve(process.cwd(), "dist"),
      uniqueName: opts.projectName,
      devtoolNamespace: `${opts.projectName}`,
      publicPath: "",
    },
    devServer: {
      // contentBase: path.join(__dirname, "dist"),
      // port: 3001,
      compress: true,
      historyApiFallback: true,
      headers: {
        "Access-Control-Allow-Origin": "*"
      },
      firewall: false,
      client: {
        host: "localhost"
      }
    },
    devtool: 'source-map',

    cache: false,

    optimization: {
      minimize: false,
      runtimeChunk: 'single',
    },

    resolve: {
      extensions: ['.jsx', '.js', '.json', '.ts', '.tsx'],
    },

    module: {
      rules: [
        // {
        //   test: /\.(js|ts)x?$/,
        //   exclude: /node_modules/,
        //   use: {
        //     loader: require.resolve("babel-loader", {
        //       paths: [__dirname]
        //     }),
        //   },
        // },
        // {
        //   test: /\.tsx?$/,
        //   loader: require.resolve('babel-loader'),
        //   options: {
        //     presets: [require.resolve('@babel/preset-typescript')],
        //   },
        // },
        {
          test: /\.(js|ts)x?$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader'
          }
        }, {
          test: /\.css$/i,
          include: [/node_modules/, /src/],
          use: [{
              loader: require.resolve("style-loader", {
                paths: [__dirname]
              }),
            },
            {
              loader: require.resolve("css-loader", {
                paths: [__dirname]
              }),
              options: {
                modules: false,
              },
            },
          ],
        },
        {
          test: /\.(bmp|png|svg|jpg|jpeg|gif|webp)$/i,
          exclude: /node_modules/,
          type: "asset/resource",
        },
        {
          test: /\.html$/i,
          exclude: /node_modules|public/,
          type: "asset/source",
        },
      ],
    },

    plugins: [

      new BundleAnalyzerPlugin({
        analyzerMode: webpackConfigEnv.analyze ? "server" : "disabled",
      }),
      webpackConfigEnv.webpackConfigEnv && webpackConfigEnv.webpackConfigEnv.analyze ?
      false :
      new ForkTsCheckerWebpackPlugin({
        typescript: {
          diagnosticOptions: {
            semantic: true,
            syntactic: true,
          },
          mode: "write-references",
        },
      }),
      new ModuleFederationPlugin({
        name: 'host',
        library: {
          type: 'var',
          name: 'host'
        },
        exposes: {},
        remotes: {
          'app1': '\"http://localhost:3003/remoteEntry.js\"',
        },
        shared: {
          "@angular/core": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/common": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/router": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
          "@angular/common/http": {
            singleton: true,
            strictVersion: true,
            requiredVersion: '12.0.0'
          },
        },
      }),
      new HtmlWebpackPlugin({
        template: './public/index.html',
        excludeChunks: ["host"],
      }),
    ]
  }

  return config;
};